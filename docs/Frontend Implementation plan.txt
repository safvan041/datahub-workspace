Frontend Implementation Plan: DataHub Workspace
Version: 1.0

Date: July 30, 2025

Target: Frontend Contributors

1. Current State of the Application
A backend API is fully functional and running locally. Frontend developers should ensure the backend application is running on http://localhost:8080 while they work.

The backend currently supports the following features:

User registration.

User login via HTTP Basic Authentication.

Creating a new data repository (requires authentication).

Listing all repositories for the logged-in user (requires authentication).

2. Frontend Implementation Goal
The primary goal is to create the user interface for authentication. This involves building two main pages: a Registration page and a Login page. The UI should be clean, simple, and provide clear feedback to the user on success or failure.

3. Required Pages and API Endpoints
Page 1: Registration (/register)
This page will allow a new user to create an account.

UI Requirements:

A form with three input fields: username, email, and password.

A "Register" button.

Display a success message or an error message to the user after the form is submitted.

API Endpoint Details:

URL: http://localhost:8080/api/users/register

Method: POST

Headers: Content-Type: application/json

Request Body (JSON):

JSON

{
    "username": "someuser",
    "email": "user@example.com",
    "password": "apassword123"
}
Success Response (201 Created): The API will return the newly created user object. The frontend should redirect the user to the login page upon success.

Error Response (e.g., 4xx): The API will return an error if the username or email is already taken. The frontend should display a user-friendly error message.

Page 2: Login (/login)
This page will allow an existing user to log in.

UI Requirements:

A form with two input fields: username and password.

A "Login" button.

Display an error message if the login fails.

API Endpoint Details:

URL: http://localhost:8080/api/users/me

Method: GET

Authentication: The frontend needs to make this request using HTTP Basic Authentication. This means creating an Authorization header by Base64 encoding the string username:password.

Example Header: Authorization: Basic c2Fmd2FuOnBhc3N3b3JkMTIz (this is the encoded version of safwan:password123)

Success Response (200 OK): The API will return the authenticated user's details. The frontend should save the user's credentials or a token and redirect them to their dashboard.

Error Response (401 Unauthorized): The API will return a 401 error if the username does not exist or the password is incorrect. The frontend should display an "Invalid username or password" message.
